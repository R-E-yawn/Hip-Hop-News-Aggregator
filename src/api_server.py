from flask import Flask, jsonify, request
from flask_cors import CORS
import subprocess
import sys
import json
import os
import threading

app = Flask(__name__)
CORS(app)  # Allow frontend to call this API

# Global variable to track workflow status
workflow_status = {
    'running': False,
    'step': 'idle',
    'progress': 0,
    'message': 'Ready to start',
    'error': None,
    'complete': False
}

def run_workflow_async():
    """Run the workflow in a separate thread"""
    global workflow_status
    
    try:
        workflow_status.update({
            'running': True,
            'step': 'spotify',
            'progress': 20,
            'message': 'Connecting to Spotify...',
            'error': None,
            'complete': False
        })
        
        # Step 1: Run Spotify script
        print("üéµ Running Spotify script...")
        result = subprocess.run([sys.executable, "spotify_fetcher.py"], 
                              capture_output=True, text=True, check=True)
        
        workflow_status.update({
            'step': 'reddit',
            'progress': 60,
            'message': 'Fetching Reddit articles...'
        })
        
        # Step 2: Run Reddit script
        print("üì∞ Running Reddit script...")
        result = subprocess.run([sys.executable, "reddit_fetcher.py"], 
                              capture_output=True, text=True, check=True)
        
        workflow_status.update({
            'step': 'combining',
            'progress': 80,
            'message': 'Combining data...'
        })
        
        # Step 3: Combine data
        print("üîÑ Combining data...")
        combine_data()
        
        workflow_status.update({
            'running': False,
            'step': 'complete',
            'progress': 100,
            'message': 'Workflow completed successfully!',
            'complete': True
        })
        
    except Exception as e:
        workflow_status.update({
            'running': False,
            'step': 'error',
            'progress': 0,
            'message': f'Error: {str(e)}',
            'error': str(e),
            'complete': False
        })
        print(f"‚ùå Workflow error: {e}")

def combine_data():
    """Combine Spotify and Reddit data into data.js"""
    try:
        # Read Spotify data
        with open('spotify_data.json', 'r') as f:
            spotify_data = json.load(f)
        
        # Extract artist names
        top_artists = [artist['name'] for artist in spotify_data['top_artists']['short_term']]
        
        # Read Reddit articles
        with open('/Users/aryantyagi/rap-news/public/articles/articles.json', 'r') as f:
            reddit_data = json.load(f)
        
        # Extract just the articles array
        articles = reddit_data.get('articles', [])
        
        # Create combined JavaScript content
        js_content = f"""// Auto-generated by workflow API
const topArtists = {json.dumps(top_artists, indent=2)};

const articles = {json.dumps(articles, indent=2)};

export {{ topArtists, articles }};
export default {{ topArtists, articles }};"""
        
        # Write to data.js
        with open('data.js', 'w') as f:
            f.write(js_content)
            
        print(f"‚úÖ Combined data.js created with {len(top_artists)} artists and {len(articles)} articles")
        
    except Exception as e:
        raise Exception(f"Failed to combine data: {e}")

@app.route('/start-workflow', methods=['POST'])
def start_workflow():
    """API endpoint to start the Spotify + Reddit workflow"""
    global workflow_status
    
    if workflow_status['running']:
        return jsonify({
            'success': False,
            'message': 'Workflow already running',
            'status': workflow_status
        }), 400
    
    # Reset status
    workflow_status = {
        'running': True,
        'step': 'starting',
        'progress': 10,
        'message': 'Starting workflow...',
        'error': None,
        'complete': False
    }
    
    # Start workflow in background thread
    thread = threading.Thread(target=run_workflow_async)
    thread.daemon = True
    thread.start()
    
    return jsonify({
        'success': True,
        'message': 'Workflow started',
        'status': workflow_status
    })

@app.route('/workflow-status', methods=['GET'])
def get_workflow_status():
    """Get current workflow status"""
    return jsonify({
        'success': True,
        'status': workflow_status
    })

@app.route('/data', methods=['GET'])
def get_data():
    """Get the current data (artists and articles)"""
    try:
        # Check if data.js exists
        if not os.path.exists('data.js'):
            return jsonify({
                'success': False,
                'message': 'No data available. Run workflow first.'
            }), 404
        
        # Read current Spotify data if available
        artists = []
        if os.path.exists('spotify_data.json'):
            with open('spotify_data.json', 'r') as f:
                spotify_data = json.load(f)
                artists = [artist['name'] for artist in spotify_data['top_artists']['short_term']]
        
        # Read current Reddit articles if available
        articles = []
        if os.path.exists('/Users/aryantyagi/rap-news/public/articles/articles.json'):
            with open('/Users/aryantyagi/rap-news/public/articles/articles.json', 'r') as f:
                reddit_data = json.load(f)
                articles = reddit_data.get('articles', [])
        
        return jsonify({
            'success': True,
            'data': {
                'topArtists': artists,
                'articles': articles
            }
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Error reading data: {str(e)}'
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Simple health check"""
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    print("üöÄ Starting Music Data API Server...")
    print("üì° API will be available at http://localhost:5000")
    print("üéµ Endpoints:")
    print("   POST /start-workflow - Start Spotify + Reddit data collection")
    print("   GET  /workflow-status - Check workflow progress")
    print("   GET  /data - Get current music data")
    print("   GET  /health - Health check")
    
    app.run(debug=True, host='0.0.0.0', port=5000)